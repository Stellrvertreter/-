#include <WiFi.h>
#include <WiFiClientSecure.h>
#include <UniversalTelegramBot.h> 
#include <ArduinoJson.h>
#include <Adafruit_MCP4725.h>
#define PIN_PIR 23
#define PIN_LED 18
#define sensorPin 15
Adafruit_MCP4725 buzzer;
int j = 30000;
int flag;
unsigned long lastEven = 0;
// Вставьте сюда свои учетные данные сети
const char* ssid = "RTF_IoT";
const char* password = "rtf-1234";
 
// Запускаем бот
#define BOTtoken "5691201973:AAHWZ8mFpxFTVI7w4Wp46Re0wCIGfBJUklQ"  // Вставляем токен бота.
 
// Используйте @myidbot, чтобы получить ID пользователя или группы
// Помните, что бот сможет вам писать только после нажатия
// вами кнопки /start
#define CHAT_ID1 "437700378"
#define CHAT_ID2 "973962830"
#define CHAT_ID3 "2015348869"
 
#ifdef ESP8266
  X509List cert(TELEGRAM_CERTIFICATE_ROOT);
#endif
 
WiFiClientSecure client;
UniversalTelegramBot bot(BOTtoken, client);
 
// Каждую секунду проверяет новые сообщения
int botRequestDelay = 10000;
unsigned long lastTimeBotRan;
 
const int ledPin = 2;
bool ledState = LOW;
 
// Задаем действия при получении новых сообщений 
void handleNewMessages(int numNewMessages) {
  Serial.println("handleNewMessages");
  Serial.println(String(numNewMessages));
 
  for (int i=0; i<numNewMessages; i++) {
    // Идентификатор чата запроса
    String chat_id = String(bot.messages[i].chat_id);
    if (chat_id != CHAT_ID1 && chat_id != CHAT_ID2 && chat_id != CHAT_ID3){
      bot.sendMessage(chat_id, "Unauthorized user", "");
      continue;
    }
    
    // Выводим полученное сообщение
    String text = bot.messages[i].text;
    Serial.println(text);
 
    String from_name = bot.messages[i].from_name;
 
    if (text == "/command1") {
      bot.sendMessage(chat_id, "LED state set to ON", "");
      ledState = HIGH;
      digitalWrite(ledPin, ledState);
    }
    
    if (text == "/command2") {
      bot.sendMessage(chat_id, "LED state set to OFF", "");
      ledState = LOW;
      digitalWrite(ledPin, ledState);
    }
    
    if (text == "/command3") {
      if (digitalRead(ledPin)){
        bot.sendMessage(chat_id, "LED is ON", "");
      }
      else{
        bot.sendMessage(chat_id, "LED is OFF", "");
      }
    }
  }
}
 
void setup() {
  Serial.begin(115200);
  pinMode(PIN_PIR, INPUT);
  pinMode(PIN_LED, OUTPUT);
  pinMode(sensorPin, INPUT);
  Wire.begin();
  buzzer.begin(0x61);
 
  #ifdef ESP8266
    configTime(0, 0, "pool.ntp.org");      // получаем всемирное координированное время (UTC) через NTP
    client.setTrustAnchors(&cert); // Получаем сертификат api.telegram.org
  #endif
 
  pinMode(ledPin, OUTPUT);
  digitalWrite(ledPin, ledState);
  
  // Подключаемся к Wi-Fi
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  #ifdef ESP32
    client.setCACert(TELEGRAM_CERTIFICATE_ROOT); // Добавляем корневой сертификат для api.telegram.org
  #endif
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi..");
  }
  // Выводим IP ESP32
  Serial.println(WiFi.localIP());
 
  bot.sendMessage(CHAT_ID1, "Bot Started", "");
  bot.sendMessage(CHAT_ID2, "Bot Started", "");
  bot.sendMessage(CHAT_ID3, "Bot Started", "");
}
 
void loop() {
  if (millis() > lastTimeBotRan + botRequestDelay) {
    int numNewMessages = bot.getUpdates(bot.last_message_received + 1);
 
    while(numNewMessages) {
      Serial.println("got response");
      handleNewMessages(numNewMessages);
      numNewMessages = bot.getUpdates(bot.last_message_received + 1);
    }
    lastTimeBotRan = millis();
  }
  int pirVal = digitalRead(PIN_PIR);
  int sensorData = digitalRead(sensorPin);
  // Звук сирены
  if(pirVal || !sensorData){
    flag=1;
  }
  if (flag==1)
  {
    
    for (int i = 0; i < (5 - j / 6000); i++) {
      buzzer.setVoltage(0, false);
      //delayMicroseconds(j);
      delay_nop(j);
      buzzer.setVoltage(4095, false);
      //delayMicroseconds(j);
      delay_nop(j);
    }
  }
  j = j - 100;
  if (j <= 0) {
    j = 30000;
  }


  if (sensorData == LOW){
    if (millis() - lastEven > 25){
      Serial.println("Clap detected!");
    }
    lastEven = millis();
  }
}

void delay_nop(int u) {
  for (int i = 0; i < u; i++) {
    _NOP();
  }
}
